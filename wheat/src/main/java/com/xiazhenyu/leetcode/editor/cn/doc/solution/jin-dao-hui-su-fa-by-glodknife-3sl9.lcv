[![](https://pic.leetcode-cn.com/1640530258-unHZvN-file_1640530258646 "关于我")](https://mp.weixin.qq.com/s/oFWyyYMaC0XCM2hIW2V8bA) [![](https://pic.leetcode-cn.com/1640530258-JzFwTe-file_1640530258650 "公众号")](https://gitee.com/goldknife6/README/raw/master/qr.png) [![](https://pic.leetcode-cn.com/1640530258-RCQisw-file_1640530258650 "知乎")](https://www.zhihu.com/people/zhangzhang626) [![](https://pic.leetcode-cn.com/1640530258-lXpwkm-file_1640530258651 "GitHub")](https://github.com/glodknife/algorithm)

💘献上最喜欢的iu

![image.png](https://pic.leetcode-cn.com/1643808049-ntnixT-image.png)

## 题目解答

### 方法一：回溯法+剪枝

#### 思路和算法

回溯法用于寻找所有的可行解，通常用一个树来表示，如下图所示。每一个叶子节点都代表着一个组合，当然组合是否是有效的需要根据题意来分析。

在本题中，组合中的元素之和需要等于`target`，因此并不是所有的叶子节点都是合法的组合。

![image.png](https://pic.leetcode-cn.com/1643808021-LBggIw-image.png)

- 从根节点出发，每到达一个节点后，会根据当前状态和题意作出一系列选择来更新路径(`path`)中的元素。
  - 状态路径(`path`)在本题中表示某个组合中的元素。
  - 在本题中我们会从当前候选的数字集合中选中一个数字放入`path`中。
- 当到达叶节点时，表示寻找到了一个组合。
  - 这时路径之和如果等于`target`时，说明找到了一个符合题意的组合，即绿色的叶子节点。
- 到达叶节后还会进行回溯，即返回到上一个节点，然后进行新的选择来计算另外一种组合。
  - `path`就像是一个栈结构，返回到上一个节点的同时，还需要删除`path`中最后添加进去的元素。
- 当遍历完整个树的叶子节点后，就表示寻找到了所有的可能的组合了。

需要特别注意一下，因为题中有一个要求：同一个数字可以无限制重复被选取，所以我们可以重复地使用候选数字集合中第一个数字，即图中`2->2->2->2`这样的路径。

这样我们就必须对树进行剪枝操作，不然就会出现栈溢出的情况。如果在路径中走到下一个节点时路径和大于target，那么就没必要对其进行搜索了，即对当前路径进行剪枝操作。

#### 代码实现

* java

```java
class Solution {
    List<List<Integer>> result = new ArrayList<>();
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        // 首先需要排序，这样我们就可以更好地去剪枝
        Arrays.sort(candidates);
        backtracking(candidates, target, 0, new ArrayList<>(), 0);
        return result;
    }
    public void backtracking(int[] candidates, int target, int start, List<Integer> path, int sum) {
        // 到达当前节点时的路径之和等于target
        // 说明我们找到了一个符合条件的组合
        if (sum == target) { 
            result.add(new ArrayList<>(path));
            return;
        }
        // 只有路径和小于等于target时，才会去搜索子节点
        // 即剪枝操作：sum + candidates[i] <= target
        // 为了不选出重复的组合，我们需要按顺序从候选集合中选取元素
        for (int i = start; i < candidates.length && (sum + candidates[i] <= target); i++) {
            path.add(candidates[i]); // 选中一个数字放入path中
            backtracking(candidates, target, i, path, sum + candidates[i]);
            path.remove(path.size() - 1); // 回溯操作，从当前path中删除最后一个数字
        }
    }
}
```

### 其他

- 💘最近正在制作「[图解大厂高频算法题](https://github.com/glodknife/algorithm)」，持续更新中~ ，其主旨为根据“二八法则”的原理，以付出20%的时间成本，获得80%的刷题的收益，让那些想进互联网大厂或心仪公司的人少走些弯路，欢迎关注~
- 💘一个人刷题很孤单，【[点击这里](https://gitee.com/goldknife6/README/raw/master/qr3.png)】欢迎一起组队刷题，你不是一个人在奋斗。

